BP.num = unlist(BP.ori)
FE.data = data.frame(param[rep(Ind.num, 2*sapply(BP.ori, length)), ], BP = rep(BP.num, each = 2), hand = c(F, T) )
site.FE = sapply(1:dim(DSB.data)[1], function(i) do.call(DSB, DSB.data[i, ]))
return(site.FE)
}
#function to create FEs
create.FE = function(site.num){
chroms = chrom.site[[site.num]]
Ind.num = sapply(chroms, getICind)
BP.ori = lapply(Ind.num, function(i) which(breaks[[as.character(i)]] == 1))
BP.num = unlist(BP.ori)
FE.data = data.frame(param[rep(Ind.num, 2*sapply(BP.ori, length)), ], BP = rep(BP.num, each = 2), hand = c(F, T) )
site.FE = sapply(1:dim(FE.data)[1], function(i) do.call(FE, FE.data[i, ]))
return(site.FE)
}
FE.chrom = sapply(1:N, create.FE)
sapply(FE.chrom, length)
?sample
0/0
rep(c(1,0), times = 100*c(1, 0.2))
class(FE.chrom[[1]])
a = list()
?append
a
rm(a)
a = list()
append(a, fe = 12)
append(a, 12)
rm)a
rm(a)
a = list()
c(a, fe = 12)
rm(a)
2*(1:6)
2*(1:6)-1
2*(1:(12/2)) - 1
2*(1:(0/2)) - 1
2*(1:(18/2)) - 1
a = 1:10
a
a[a == 5 | 6]
a[a == 5]
a[a == 5 | a == 6]
a[a == 5 | a == 6] = NULL
a[-(which(a == 5 | a == 6))]
a
a[-(which(a == 5 || a == 6))]
a[-(which(a == 5 | a == 6))]
rep(c(1, 0), times = c(0, 10))
rm(a)
create.MR = function(site.num){
FEs = FE.chrom[[site.num]]
n.fe = length(FEs)
if(n.fe == 0){
return(list())
}
mr.list = list()
n.pair = 2*(1:(n.fe/2)) - 1
n.single = 1:n.fe
while(length(n.single) > 0){
restitute = sample(rep(c(1, 0), times = 1000*c(A*length(n.pair), B*(length(n.single)*(length(single) - 1))/2)), size = 1)
if(restitute){
pair = sample(n.pair, size = 1)
n.pair = n.pair[-(which(n.pair == pair))]
n.single = n.single[-(which(n.single == pair | n.single == (pair + 1)))]
mr.list = c(mr.list, MR(FE1 = FEs[[pair]], FE2 = FEs[[pair + 1]]))
}else{
mispair = sample(n.single, size = 2, replace = F)
n.single = n.single[-(which(n.single == mispair[1] | n.single == mispair[2]))]
n.pair = n.pair[-(which(n.pair == mispair | n.pair = mispair - 1))]
mr.list = c(mr.list, MR(FE1 = FEs[[mispair[1]]], FE2 = FEs[[mispair[2]]]))
}
create.MR = function(site.num){
FEs = FE.chrom[[site.num]]
n.fe = length(FEs)
if(n.fe == 0){
return(list())
}
mr.list = list()
n.pair = 2*(1:(n.fe/2)) - 1
n.single = 1:n.fe
while(length(n.single) > 0){
restitute = sample(rep(c(1, 0), times = 1000*c(A*length(n.pair), B*(length(n.single)*(length(single) - 1))/2)), size = 1)
if(restitute){
pair = sample(n.pair, size = 1)
n.pair = n.pair[-(which(n.pair == pair))]
n.single = n.single[-(which(n.single == pair | n.single == (pair + 1)))]
mr.list = c(mr.list, MR(FE1 = FEs[[pair]], FE2 = FEs[[pair + 1]]))
}else{
mispair = sample(n.single, size = 2, replace = F)
n.single = n.single[-(which(n.single == mispair[1] | n.single == mispair[2]))]
n.pair = n.pair[-(which(n.pair == mispair | n.pair == mispair - 1))]
mr.list = c(mr.list, MR(FE1 = FEs[[mispair[1]]], FE2 = FEs[[mispair[2]]]))
}
}
return(mr.list)
}
a = create.MR(1)
A = 1
B = 0.2
a = create.MR(1)
a
a = create.MR(2)
a = create.MR(2)
a = create.MR(1)
create.MR = function(site.num){
browser()
FEs = FE.chrom[[site.num]]
n.fe = length(FEs)
if(n.fe == 0){
return(list())
}
mr.list = list()
n.pair = 2*(1:(n.fe/2)) - 1
n.single = 1:n.fe
while(length(n.single) > 0){
restitute = sample(rep(c(1, 0), times = 1000*c(A*length(n.pair), B*(length(n.single)*(length(single) - 1))/2)), size = 1)
if(restitute){
pair = sample(n.pair, size = 1)
n.pair = n.pair[-(which(n.pair == pair))]
n.single = n.single[-(which(n.single == pair | n.single == (pair + 1)))]
mr.list = c(mr.list, MR(FE1 = FEs[[pair]], FE2 = FEs[[pair + 1]]))
}else{
mispair = sample(n.single, size = 2, replace = F)
n.single = n.single[-(which(n.single == mispair[1] | n.single == mispair[2]))]
n.pair = n.pair[-(which(n.pair == mispair | n.pair == mispair - 1))]
mr.list = c(mr.list, MR(FE1 = FEs[[mispair[1]]], FE2 = FEs[[mispair[2]]]))
}
}
return(mr.list)
}
a = create.MR(1)
rep(c(1, 0), times = 1000*c(A*length(n.pair), B*(length(n.single)*(length(single) - 1))/2))
B*(length(n.single)*(length(single) - 1))/2
create.MR = function(site.num){
#  browser()
FEs = FE.chrom[[site.num]]
n.fe = length(FEs)
if(n.fe == 0){
return(list())
}
mr.list = list()
n.pair = 2*(1:(n.fe/2)) - 1
n.single = 1:n.fe
while(length(n.single) > 0){
restitute = sample(rep(c(1, 0), times = 1000*c(A*length(n.pair), B*(length(n.single)*(length(n.single) - 1))/2)), size = 1)
if(restitute){
pair = sample(n.pair, size = 1)
n.pair = n.pair[-(which(n.pair == pair))]
n.single = n.single[-(which(n.single == pair | n.single == (pair + 1)))]
mr.list = c(mr.list, MR(FE1 = FEs[[pair]], FE2 = FEs[[pair + 1]]))
}else{
mispair = sample(n.single, size = 2, replace = F)
n.single = n.single[-(which(n.single == mispair[1] | n.single == mispair[2]))]
n.pair = n.pair[-(which(n.pair == mispair | n.pair == mispair - 1))]
mr.list = c(mr.list, MR(FE1 = FEs[[mispair[1]]], FE2 = FEs[[mispair[2]]]))
}
}
return(mr.list)
}
a = create.MR(2)
create.MR = function(site.num){
browser()
FEs = FE.chrom[[site.num]]
n.fe = length(FEs)
if(n.fe == 0){
return(list())
}
mr.list = list()
n.pair = 2*(1:(n.fe/2)) - 1
n.single = 1:n.fe
while(length(n.single) > 0){
restitute = sample(rep(c(1, 0), times = 1000*c(A*length(n.pair), B*(length(n.single)*(length(n.single) - 1))/2)), size = 1)
if(restitute){
pair = sample(n.pair, size = 1)
n.pair = n.pair[-(which(n.pair == pair))]
n.single = n.single[-(which(n.single == pair | n.single == (pair + 1)))]
mr.list = c(mr.list, MR(FE1 = FEs[[pair]], FE2 = FEs[[pair + 1]]))
}else{
mispair = sample(n.single, size = 2, replace = F)
n.single = n.single[-(which(n.single == mispair[1] | n.single == mispair[2]))]
n.pair = n.pair[-(which(n.pair == mispair | n.pair == mispair - 1))]
mr.list = c(mr.list, MR(FE1 = FEs[[mispair[1]]], FE2 = FEs[[mispair[2]]]))
}
}
return(mr.list)
}
a = create.MR(2)
length(n.pair)
a = create.MR(1)
which(n.pair == mispair | n.pair == mispair - 1)
n.pair == mispair
a = create.MR(2)
a = create.MR(2)
which(n.pair == mispair | n.pair == mispair - 1)
a = create.MR(2)
which(n.pair == mispair | n.pair == mispair - 1)
which(n.pair == mispair | n.pair == mispair - 1)
which(n.pair == mispair | n.pair == mispair - 1)
which(1:10 in c(2,3))
1:10 in c(2,3)
1:10 %in% c(2,3)
c(2,3) %in% 1:10
1:9 %in% c(2,3)
which(1:9 %in% c(2,3))
which(1:9 %in% c(2,3) | 1:9 %in% c(7,3))
which(1:9 %in% c(2,3) | 1:9 %in% c(7,5))
create.MR = function(site.num){
browser()
FEs = FE.chrom[[site.num]]
n.fe = length(FEs)
if(n.fe == 0){
return(list())
}
mr.list = list()
n.pair = 2*(1:(n.fe/2)) - 1
n.single = 1:n.fe
while(length(n.single) > 0){
restitute = sample(rep(c(1, 0), times = 1000*c(A*length(n.pair), B*(length(n.single)*(length(n.single) - 1))/2)), size = 1)
if(restitute){
pair = sample(n.pair, size = 1)
n.pair = n.pair[-(which(n.pair == pair))]
n.single = n.single[-(which(n.single == pair | n.single == (pair + 1)))]
mr.list = c(mr.list, MR(FE1 = FEs[[pair]], FE2 = FEs[[pair + 1]]))
}else{
mispair = sample(n.single, size = 2, replace = F)
n.single = n.single[-(which(n.single == mispair[1] | n.single == mispair[2]))]
n.pair = n.pair[-(which(n.pair %in% mispair | n.pair %in% (mispair - 1)))]
mr.list = c(mr.list, MR(FE1 = FEs[[mispair[1]]], FE2 = FEs[[mispair[2]]]))
}
}
return(mr.list)
}
a = create.MR(2)
a = create.MR(1)
a = create.MR(2)
which(c(1,3,9) %in% mispair | c(1,3,9) %in% (mispair - 1))
c[which(c(1,3,9) %in% mispair | c(1,3,9) %in% (mispair - 1))]
c(1,3,9)[which(c(1,3,9) %in% mispair | c(1,3,9) %in% (mispair - 1))]
c(1,3,9)[-which(c(1,3,9) %in% mispair | c(1,3,9) %in% (mispair - 1))]
integer(0)
-integer(0)
1:10[integer(0)]
1:10[-integer(0)]
a = 1:10[-integer(0)]
a
rm(a)
create.MR = function(site.num){
browser()
FEs = FE.chrom[[site.num]]
n.fe = length(FEs)
if(n.fe == 0){
return(list())
}
mr.list = list()
n.pair = 2*(1:(n.fe/2)) - 1
n.single = 1:n.fe
while(length(n.single) > 0){
restitute = sample(rep(c(1, 0), times = 1000*c(A*length(n.pair), B*(length(n.single)*(length(n.single) - 1))/2)), size = 1)
if(restitute){
pair = sample(n.pair, size = 1)
n.pair = n.pair[-(which(n.pair == pair))]
n.single = n.single[-(which(n.single == pair | n.single == (pair + 1)))]
mr.list = c(mr.list, MR(FE1 = FEs[[pair]], FE2 = FEs[[pair + 1]]))
}else{
mispair = sample(n.single, size = 2, replace = F)
n.single = n.single[-(which(n.single == mispair[1] | n.single == mispair[2]))]
n.pair = n.pair[!(n.pair %in% mispair | n.pair %in% (mispair - 1))]
mr.list = c(mr.list, MR(FE1 = FEs[[mispair[1]]], FE2 = FEs[[mispair[2]]]))
}
}
return(mr.list)
}
create.MR(2)
(n.pair %in% mispair | n.pair %in% (mispair - 1))
!(n.pair %in% mispair | n.pair %in% (mispair - 1))
create.MR(2)
!(n.pair %in% mispair | n.pair %in% (mispair - 1))
which(n.pair %in% mispair | n.pair %in% (mispair - 1))
1[which(n.pair %in% mispair | n.pair %in% (mispair - 1))]
MR.chrom = sapply(1:N, create.MR)
create.MR = function(site.num){
FEs = FE.chrom[[site.num]]
n.fe = length(FEs)
if(n.fe == 0){
return(list())
}
mr.list = list()
n.pair = 2*(1:(n.fe/2)) - 1
n.single = 1:n.fe
while(length(n.single) > 0){
restitute = sample(rep(c(1, 0), times = 1000*c(A*length(n.pair), B*(length(n.single)*(length(n.single) - 1))/2)), size = 1)
if(restitute){
pair = sample(n.pair, size = 1)
n.pair = n.pair[-(which(n.pair == pair))]
n.single = n.single[-(which(n.single == pair | n.single == (pair + 1)))]
mr.list = c(mr.list, MR(FE1 = FEs[[pair]], FE2 = FEs[[pair + 1]]))
}else{
mispair = sample(n.single, size = 2, replace = F)
n.single = n.single[-(which(n.single == mispair[1] | n.single == mispair[2]))]
n.pair = n.pair[!(n.pair %in% mispair | n.pair %in% (mispair - 1))]
mr.list = c(mr.list, MR(FE1 = FEs[[mispair[1]]], FE2 = FEs[[mispair[2]]]))
}
}
return(mr.list)
}
MR.chrom = sapply(1:N, create.MR)
rm(list = ls())
setwd("F:/my_profiles/Textbook/Textbook/URAP/RS/SUMMER")
rm(list = ls())
### I. Load required packages, functions and objects
require(RCurl)
source("CASobj_prim.r")#load the objects
source("CASobj_fn.r")#load the functions
### II. Build the cell
## Set Needed parameters
N = 2#number of sites in each cell
param = data.frame(ICindex = 1:4, segnum = c(4,4,4,4), cenloc = c(2,1,2,1))
##Create Initial Chromosome objects
chrom = sapply(1:dim(param)[1],
function(i) do.call(IC, param[i,]))
## Separate the chromosomes into N sites randomly
set.seed(10)
sites = sample(x = 1:N, size = dim(param)[1], replace = T)
chrom.site = split(chrom, f = as.factor(sites))
### III. Make break in sites
## Set mean for total number of breaks
avgBr = 3
## Set parameters in LET
a = 1
L = 2
## Generate the total number of breaks with poission distribution
set.seed(10)
numBr = rpois(n = 1, lambda = avgBr)
## Generate the number of breaks created together with LET effect
set.seed(20)
breaks = sapply(1:numBr,function(i) rpois(1, lambda = a*L)) + 1
## Generate places where first breaks happen
sam.space = rep(1:dim(param)[1], param$segnum)
set.seed(20)
breaks.pl = sample(sam.space, size = numBr, replace = F)
## Count total number of breaks happen in each site
breaks = split(breaks, f = as.factor(sites[breaks.pl]))
breaks = lapply(breaks, sum)
breaks0 = rep(list(0), N)
names(breaks0) = 1:N
breaks = merge.list(breaks, breaks0)
## Generate places where breaks happen in each site
set.seed(20)
breaks = lapply(1:N, site.breaks)
breaks = unlist(breaks, recursive = F)
breaks = breaks[order(as.numeric(names(breaks)))]
## Create classes FE with the breaks generated above
FE.chrom = sapply(1:N, create.FE)
### IV. Make misrejoining in sites
## Set parameters for the Markov process during misrejoining
A = 1
B = 0.2
## Create Misrejoining
set.seed(20)
MR.chrom = sapply(1:N, create.MR)
set.seed(20)
MR.chrom = sapply(1:N, create.MR)
?sample.int
sample(1, size = 1)
sample(5, size = 1)
sample(10, size = 1)
sample(c(10), size = 1)
set.seed(20)
MR.chrom = sapply(1:N, create.MR)
set.seed(10)
MR.chrom = sapply(1:N, create.MR)
set.seed(20)
MR.chrom = sapply(1:N, create.MR)
source("CASobj_fn.r")#load the functions
set.seed(20)
MR.chrom = sapply(1:N, create.MR)
set.seed(20)
MR.chrom = sapply(1:N, create.MR)
rep(c(1, 0), times = 1000*c(A*length(n.pair), B*(length(n.single)*(length(n.single) - 1))/2))
sample(rep(c(1, 0), times = 1000*c(A*length(n.pair), B*(length(n.single)*(length(n.single) - 1))/2)), size = 1)
sample(rep(c(1, 0), times = 1000*c(A*length(n.pair), B*(length(n.single)*(length(n.single) - 1))/2)), size = 1)
rep(c(1, 0), times = 1000*c(A*length(n.pair), B*(length(n.single)*(length(n.single) - 1))/2))
source("CASobj_fn.r")#load the functions
set.seed(20)
MR.chrom = sapply(1:N, create.MR)
source("CASobj_fn.r")#load the functions
set.seed(20)
MR.chrom = sapply(1:N, create.MR)
setwd("F:/my_profiles/Textbook/Textbook/URAP/RS/SUMMER/CAS")
rm(list = ls())
### I. Load required packages, functions and objects
require(RCurl)
source("CASobj_prim1.r")#load the objects
source("CASobj_fn1.r")#load the functions
### II. Build the cell
## Set Needed parameters
rm(list = ls())
### I. Load required packages, functions and objects
require(RCurl)
source("CASobj_prim1.r")#load the objects
source("CASobj_fn1.r")#load the functions
### II. Build the cell
## Set Needed parameters
N = 2#number of sites in each cell
param = data.frame(ICindex = 1:4, segnum = c(4,4,4,4), cenloc = c(2,1,2,1))
##Create Initial Chromosome objects
chrom = sapply(1:dim(param)[1],
function(i) do.call(IC, param[i,]))
## Separate the chromosomes into N sites randomly
set.seed(10)
sites = sample(x = 1:N, size = dim(param)[1], replace = T)
chrom.site = split(chrom, f = as.factor(sites))
### III. Make break in sites
## Set mean for total number of breaks
avgBr = 2
## Set parameters in LET
a = 1
L = 2
## Generate the total number of breaks with poission distribution
set.seed(10)
numBr = rpois(n = 1, lambda = avgBr)
## Generate the number of breaks created together with LET effect
set.seed(20)
breaks = sapply(1:numBr,function(i) rpois(1, lambda = a*L)) + 1
## Generate places where first breaks happen
sam.space = rep(1:dim(param)[1], param$segnum)
set.seed(20)
breaks.pl = sample(sam.space, size = numBr, replace = F)
## Count total number of breaks happen in each site
breaks = split(breaks, f = as.factor(sites[breaks.pl]))
breaks = lapply(breaks, sum)
breaks0 = rep(list(0), N)
names(breaks0) = 1:N
breaks = merge.list(breaks, breaks0)
## Generate places where breaks happen in each site
set.seed(20)
breaks = lapply(1:N, site.breaks)
breaks = unlist(breaks, recursive = F)
breaks = breaks[order(as.numeric(names(breaks)))]
## Create classes FE with the breaks generated above
FE.chrom = lapply(1:N, create.FE)
### IV. Make misrejoining in sites
## Set parameters for the Markov process during misrejoining
A = 1
B = 0.2
## Create Misrejoining
set.seed(20)
MR.chrom = lapply(1:N, create.MR)
a = MR[[1]]
a = MR.chrom[[1]]
a
a = MR.chrom[[2]]
a
?save
save(MR.chrom, list = "MRgenerated")
save(MR.chrom, list = "MR.chrom")
save(MR.chrom, file = "MRgenerated.RData")
rm(list = ls())
### I. Load required packages, functions and objects
require(RCurl)
source("CASobj_prim1.r")#load the objects
source("CASobj_fn1.r")#load the functions
### II. Build the cell
## Set Needed parameters
N = 2#number of sites in each cell
param = data.frame(ICindex = 1:4, segnum = c(4,4,4,4), cenloc = c(2,1,2,1))
##Create Initial Chromosome objects
chrom = sapply(1:dim(param)[1],
function(i) do.call(IC, param[i,]))
## Separate the chromosomes into N sites randomly
set.seed(10)
sites = sample(x = 1:N, size = dim(param)[1], replace = T)
chrom.site = split(chrom, f = as.factor(sites))
### III. Make break in sites
## Set mean for total number of breaks
avgBr = 2
## Set parameters in LET
a = 1
L = 2
## Generate the total number of breaks with poission distribution
set.seed(10)
numBr = rpois(n = 1, lambda = avgBr)
## Generate the number of breaks created together with LET effect
set.seed(20)
breaks = sapply(1:numBr,function(i) rpois(1, lambda = a*L)) + 1
## Generate places where first breaks happen
sam.space = rep(1:dim(param)[1], param$segnum)
set.seed(20)
breaks.pl = sample(sam.space, size = numBr, replace = F)
## Count total number of breaks happen in each site
breaks = split(breaks, f = as.factor(sites[breaks.pl]))
breaks = lapply(breaks, sum)
breaks0 = rep(list(0), N)
names(breaks0) = 1:N
breaks = merge.list(breaks, breaks0)
## Generate places where breaks happen in each site
set.seed(20)
breaks = lapply(1:N, site.breaks)
breaks = unlist(breaks, recursive = F)
breaks = breaks[order(as.numeric(names(breaks)))]
## Create classes FE with the breaks generated above
FE.chrom = lapply(1:N, create.FE)
### IV. Make misrejoining in sites
## Set parameters for the Markov process during misrejoining
A = 1
B = 0.2
## Create Misrejoining
set.seed(20)
MR.chrom = lapply(1:N, create.MR)
MR.chrom[[2]]
rm(list = ls())
